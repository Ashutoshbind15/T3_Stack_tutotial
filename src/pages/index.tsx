import { useUser } from "@clerk/nextjs";
import { GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import { api, RouterOutputs } from "~/utils/api";
import { useState } from "react";
import Image from "next/image";
import { toast } from "react-hot-toast";
import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import superjson from "superjson";

const Home: NextPage = () => {
  const { data, isLoading } = api.posts.getAll.useQuery();
  const { user } = useUser();
  const [userip, setuserip] = useState("");
  const { mutate } = api.posts.create.useMutation({
    onSuccess: () => {
      setuserip("");
      void ctx.posts.getAll.invalidate();
    },
    onError: (e) => {
      const errorMessages = e.data?.zodError?.fieldErrors.description;
      if (errorMessages && errorMessages[0]) toast.error(errorMessages[0]);
      else toast.error("Something went wrong");
    },
  });
  const ctx = api.useContext();

  type PostWithUser = RouterOutputs["posts"]["getAll"][number];

  const PostView = (props: PostWithUser) => {
    const { post, author } = props;
    return (
      <div className="flex items-center bg-blue-700 px-4 py-2 text-white">
        <Image
          src={author?.profileImageUrl as string}
          alt={"profile"}
          className="mr-3 rounded-full"
          width={24}
          height={24}
        />
        <div>
          {post.description} - {author?.username}
        </div>
      </div>
    );
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className="">T3 demo</h1>
      {!isLoading && data?.map((el) => <PostView {...el} key={el.post.id} />)}
      {!!isLoading && <p>Loading</p>}

      {user && (
        <div>
          <input
            placeholder="type something"
            onChange={(e) => setuserip(e.target.value)}
            type="text"
            value={userip}
          />
          <button
            onClick={() => {
              mutate({
                description: userip,
              });
            }}
          >
            Post
          </button>
        </div>
      )}
    </>
  );
};

export default Home;

export const getStaticProps: GetStaticProps = async () => {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: superjson,
  });

  await ssg.posts.getAll.prefetch();

  return {
    props: {
      trpcState: ssg.dehydrate(),
    },
  };
};
